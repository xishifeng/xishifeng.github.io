$(this).get(0)与$(this)[0]等价，获取的是DOM对象，不是jq对象。
document.referrer 可返回载入当前文档的文档的 URL。
$.trim()是jQuery提供的函数，用于去掉字符串首尾的空白字符。

http://192.168.0.154:8020/lianxi0301/location.html?nn=2#name
location.search:?nn=2  以第一个?开始,至行尾或#结束
location.hash:#name  以#开始,至行尾结束

console.dirxml()显示某个节点node所包含的html/xml代码；

document.body.style.backgroundImage;
var fun2 = new Function("var a = 10; var b = 20; alert(a+b)");fun2();
function $(id){
	return document.getElementById(id);
};
.header-top>ul>li>a:not(.on):hover//css选择器里也有not选择器
DOM.children//非标准属性，只返回子元素中的HTML节点(即元素节点nodeType = 1)
DOM.childNodes//标准属性，返回指定元素的子元素集合，包括HTML节点，所有属性/文本节点(包括空白节点)。
DOM.children[0]第一个HTML节点
jquery提供了两种方法将一个jquery对象转换成一个dom对象，即[index]和.get(index)。
document.getElementById("span1").outerHTML
var newImage = new Image();//var newImage = document.createElement("img");生成的一样是DOM节点,类似的还有new Option()
sandbox沙盒沙箱
var ob = new Object();//程序逻辑ob =null;//释放变量
_html += '<p>'+obStr.data[i].title.substring(0,7)+(obStr.data[i].title.length>7?'...':'')+'</p>';
arguments.callee(xingcan)在函数(多为匿名函数)内部调用自身，不建议使用
var btn = document.getElementById("btn");btn.onclick = function(){console.log(1);};btn.click();JSclick的立刻执行
jquery的.unbind() 方法移除被选元素的事件处理程序
String()与toString()区别和应用,x.toString(): 无法转换null和undefined：,String()可以,x.toString(2)可以转为二进制字符串
window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();禁止选中文字

return window.getComputedStyle ? window.getComputedStyle(obj,null).paddingLeft : obj.currentStyle.paddingLeft; 
<link>和@import引入CSS文件的区别?
加载顺序的差别。当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式（就是闪烁），网速慢的时候还挺明显。

便于排版的form表单html5为了方便排版，可以使form的表单标签脱离form的套。方法：form指定id，所有的标签标签都添加form= id属性

<label for="t_1">请输入用户名</label>，label里的for属性的值，和目标input的id值对应（name无效）

body {
  font-family: "Helvetica Neue", Helvetica, Microsoft Yahei, Hiragino Sans GB, WenQuanYi Micro Hei, sans-serif;
}

3、@media only screen and (max-width:1000px){
	body{color:red;}div{color:bule;}
}
//在移动端屏幕低于1000px时显示以下样式

cms内容管理系统
erp企业资源计划

Xcode之于ios，Eclipse之于Android，VS之于Winphone

triggerHandler() 方法触发被选元素的指定事件类型。但不会执行浏览器默认动作，也不会产生事件冒泡。
triggerHandler() 方法与 trigger() 方法类似。不同的是它不会触发事件（比如表单提交）的默认行为，而且只影响第一个匹配元素。
与 trigger() 方法相比的不同之处
它不会引起事件（比如表单提交）的默认行为
.trigger() 会操作 jQuery 对象匹配的所有元素，而 .triggerHandler() 只影响第一个匹配元素。
由 .triggerHandler() 创建的事件不会在 DOM 树中冒泡；如果目标元素不直接处理它们，则不会发生任何事情。
该方法的返回的是事件处理函数的返回值，而不是具有可链性的 jQuery 对象。此外，如果没有处理程序被触发，则这个方法返回 undefined。

jq1.7版本以上推荐使用.on()绑定
on绑定事件的每种情况不会(比如: on如何替代one实现绑定事件)
//on 没有参数直接模拟one绑定事件。但是可以进行如下模拟
$("ul").on('click','li',function(e){
    //fun 代码
    $(this).off('click');
});

## 3.jQuery的入口函数
+ 3.1 语法
    * jQuery(document).read(function(){  });
    * $(function(){ });// **
    * window.onlaod = function(){}
    * $ === jQuery // $是jQuery全局函数的别名。
+ 3.2注意事项： **（重点）**
    * document ready:  是html文档准备就绪，也就是dom树创建完成了。可以进行dom操作了。     
     *重要的是：html页面下载完成，并准备就绪*
    
    * window.onload: 是整个页面所有的资源都加载完成，图片、js、css等...

+ 3.3 文档加载顺序： **（重点）**         
    - 下载html页面，解析html标签，遇到link标签加载css，遇到script加载js..
   
   

querySelector和querySelectorAll是W3C提供的 新的查询接口，其主要特点如下：

1、querySelector只返回匹配的第一个元素，如果没有匹配项，返回null。 
2、querySelectorAll返回匹配的元素集合，如果没有匹配项，返回空的nodelist(节点数组)。 
3、返回的结果是静态的，之后对document结构的改变不会影响到之前取到的结果。 

这两个方法都可以接受三种类型的参数：id(#)，class(.)，标签，很像jquery的选择器。

大部分人都知道，querySelectorAll 返回的是一个 Static Node List，而 getElementsBy 系列的返回的是一个 Live Node List。看看下面这个经典的例子 [5]：// Demo 1
var ul = document.querySelectorAll('ul')[0],
    lis = ul.querySelectorAll("li");
for(var i = 0; i < lis.length ; i++){
    ul.appendChild(document.createElement("li"));
}

// Demo 2
var ul = document.getElementsByTagName('ul')[0], 
    lis = ul.getElementsByTagName("li"); 
for(var i = 0; i < lis.length ; i++){
    ul.appendChild(document.createElement("li")); 
}
因为 Demo 2 中的 lis 是一个动态的 Node List， 每一次调用 lis 都会重新对文档进行查询，导致无限循环的问题。而 Demo 1 中的 lis 是一个静态的 Node List，是一个 li 集合的快照，对文档的任何操作都不会对其产生影响。

<ul contenteditable="true">使内容可编辑

JSON.parse(jsonstr); //可以将json字符串转换成json对象 
JSON.stringify(jsonobj); //可以将json对象转换成json对符串 

jquery遍历数组和对象
var arr = ["a", "b", "c", "d", "e"];    
var obj = { a: 'one', b: 'two', c: 'three', d: 'four', e: 'five' };  
$.each(obj,function(key,value){  
    console.log("Obj :" + key + '-' + value);  
})  
$.each(arr,function(key,value){  
    console.log("arr :" + key + '-' + value);  
}) 

HTML5本地存储只能存字符串，任何格式存储的时候都会被自动转为字符串，所以读取的时候，需要自己进行类型的转换
保存数据：localStorage.setItem(key,value);
读取数据：localStorage.getItem(key);
删除单个数据：localStorage.removeItem(key);
删除所有数据：localStorage.clear();
得到某个索引的key：localStorage.key(index);

<body onLoad="checkCookie()"></body>
function getCookie(c_name) {
	console.log(document.cookie);
	if(document.cookie.length > 0) {
		c_start = document.cookie.indexOf(c_name + "=");
		if(c_start != -1) {
			c_start = c_start + c_name.length + 1;
			c_end = document.cookie.indexOf(";", c_start);
			if(c_end == -1) c_end = document.cookie.length;
			return unescape(document.cookie.substring(c_start, c_end));
		}
	};
	return "";
};
//清楚cookie的函数
function clearCookie() {
	var keys = document.cookie.match(/[^ =;]+(?=\=)/g);
	if(keys) {
		for(var i = keys.length; i--;)
			document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
	};
};

instanceof 用于判断一个变量是否是某个对象的实例

//禁止选中文字
*:not(input,textarea){   
    -webkit-touch-callout:none;  /*系统默认菜单被禁用*/   
    -webkit-user-select:none; /*webkit浏览器*/   
    -khtml-user-select:none; /*早期浏览器*/   
    -moz-user-select:none;/*火狐*/   
    -ms-user-select:none; /*IE10*/   
    user-select:none;   
}  

nth-child(n) 对应根据E元素确定的父元素的所有子元素，nth-of-type(n) 的不同之处在于其对应的是只有E元素，会忽略其子元素。
E:nth-last-child(n) 同E:nth-child(n) 计算顺序相反。
E:nth-last-of-type(n) 同E:nth-of-type(n) 计算顺序相反。

table{border-collapse:collapse;}//collapse这个属性比较实用
separate	默认值。边框会被分开。不会忽略 border-spacing 和 empty-cells 属性。
collapse	如果可能，边框会合并为一个单一的边框。会忽略 border-spacing 和 empty-cells 属性。
表格运用圆角需要要 border-collapse: separate;

网页里禁止选中图片，可以在图片上方加一个透明的div遮罩，这样右键就不会有另存为的选项了

background-clip：border-box|padding-box|content-box
该属性指定了背景在哪些区域可以显示，但与背景开始绘制的位置无关，背景的绘制的位置可以出现在不显示背景的区域，这时就相当于背景图片被不显示背景的区域裁剪了一部分一样。
background-origin：padding-box|border-box|content-box
该属性指定了背景从哪个区域(边框、补白或内容)开始绘制,但也仅仅能控制背景开始绘制的位置，你可以用这个属性在边框上绘制背景，但边框上的背景显不显示出来那就要由background-clip来决定了

不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout,mouseover事件.//尽量不要用
只有在鼠标指针离开被选元素时，才会触发 mouseleave,mouseenter事件.//用的情况更多

处理对象键为变量的情况:
var data = {},hello = "me";
data[hello] = "hello word";

界面上的所有JS操作不会被浏览器记住，就无法回到之前的状态

1. jquery 在iframe子页面获取父页面元素代码如下:
$("#objid", parent.document)
2. jquery在父页面 获取iframe子页面的元素
代码如下:
$("#objid",document.frames('iframename').document)
3.js 在iframe子页面获取父页面元素代码如下:
window.parent.document.getElementByIdx_x("元素id");
4.js 在父页面获取iframe子页面元素代码如下:
window.frames["iframe_ID"].contentDocument.getElementByIdx_x("元素id");
5.子类iframe内调用父类函数：
window.parent.func();


(function(window, document){
	//对于当前作用域中，如果将window对象传入，就不用依赖全局对象了
	var _div = document.querySelector('#cc');;
})(window, document);

function aa (){
	console.log(111);
}();//无法执行，只是声明了一个函数，并没有生成函数的表达式。

(function aa (){
	console.log(111);
})();//加上括号之后，就先生成了函数的表达式

var bb = function (){
	console.log(111);
}();//这样也可以生成一个函数的表达式

//数组依据元素的某一数值排序
var compare = function (x, y) {//比较函数
	var _num1 = (Number(x['v4']) + Number(x['v2'])*10);
	var _num2 = (Number(y['v4']) + Number(y['v2'])*10);
	return (_num1 < _num2)?1:((_num1 > _num2)?-1:0);
};
arr.sort(compare);//重新排序,作用于arr本身，不会赋值给新的数组

//存储对象信息
localStorage.setItem('userinfo',encodeURIComponent(JSON.stringify(data['user'])));//存储用户所有信息
var _userInfo = JSON.parse(decodeURIComponent(localStorage.getItem('userinfo')));//用户信息

//小括号,这种方法前面一定要有一个;(如函数声明必须要有一个分号)
//复制操作
//逻辑运算符!
//数字运算符+

devtool调试node


chrome插件开发
chrome-extension://kbdnhlhmappejakbbdadjoocgcpfpkdm/background.js
chrome-extension:// + 扩展插件id + / 文件路径

bookmark
网页变成可编辑data:text/html,<html contenteditable>
当前网页可编辑javascript:document.body.contentEditable='true'; document.designMode='on';

笔记转移
document.getElementById('id') && document.getElementById('id').value = d;
parseInt(110,2);把二进制的110转成10进制的数字输出


<input type="date" />样式修改，兼容的处理最好是在外层加一个div，这样才能保证完全兼容的文字居中
<img onerror="javascript:this.src='image/aa.jpg'" />onerror可处理图片加载失败时的显示


针对手机网页的前端 console面板
<script src="http://dev0.tonglianjituan.com/vConsole-dev/dist/vconsole.min.js"></script>
<script>
    var vConsole = new VConsole();
    console.log('Hello world');
</script>

<input type="datetime-local" />可以出现选择时分秒的日期框

String.prototype.replaceAll = function(s1, s2) {　　
	return this.replace(new RegExp(s1, 'gm'), s2);
};

delete vv['b'];//删除某一个对象的属性

function getLen(obj){
	return Object.keys(obj).length;//获取一个数组的长度，或者一个对象的属性个数
};
